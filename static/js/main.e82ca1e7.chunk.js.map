{"version":3,"sources":["component/check.png","component/check-ok.png","component/tasks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","props","state","tick","tickf","bind","tickfok","this","setState","className","alt","onClick","classNames","check","src","Check","checkok","Checkok","textthought","title","Component","arr","App","T","rder","event","b","target","value","keyCode","push","onKeyUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,6QCqD5BC,E,kDA/CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,KAAM,GAEV,EAAKC,MAAM,EAAKA,MAAMC,KAAX,gBACX,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBANC,E,sDAWTE,KAAKC,SAAS,CAACL,KAAK,M,8BAMpBI,KAAKC,SAAS,CAACL,KAAK,M,+BAKzB,OAAO,yBAAKM,UAAU,iBAClB,yBAAKC,IAAI,GACLC,QAASJ,KAAKH,MACdK,UACIG,IAAW,MAAM,CACbC,MAA2B,IAApBN,KAAKL,MAAMC,OAE1BW,IAAMC,MAEV,yBAAKL,IAAI,GACJC,QAASJ,KAAKD,QACdG,UAAWG,IAAW,MAAO,CAC1BI,QAA6B,IAApBT,KAAKL,MAAMC,OAEvBW,IAAMG,MACf,yBAAKR,UAAWG,IAAW,OAAO,CAC9BM,YAAiC,IAApBX,KAAKL,MAAMC,QAEXI,KAAKN,MAAMkB,Y,GAzCjBC,aCFbC,EAAM,GAiCGC,E,kDA9Bb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTqB,EAAGF,GAEL,EAAKG,KAAK,EAAKA,KAAKnB,KAAV,gBALM,E,iDASfoB,GACH,IAAMC,EAAG,CAAC,kBAAC,EAAD,CAAMP,MAAOM,EAAME,OAAOC,SACpC,GAAmB,KAAhBH,EAAMI,QAGT,OAFAR,EAAIS,KAAKJ,GACTD,EAAME,OAAOC,MAAM,GAElBrB,KAAKC,SAAS,CAACe,EAAGF,M,+BAMjB,OAAO,yBAAKZ,UAAU,aACpB,uBAAGA,UAAU,WAAb,cACA,2BAAOsB,QAASxB,KAAKiB,KAAMf,UAAU,UACrC,yBAAKA,UAAU,QAAQF,KAAKL,MAAMqB,Q,GAzBtBH,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e82ca1e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.17162287.png\";","module.exports = __webpack_public_path__ + \"static/media/check-ok.14662814.png\";","import React, { Component } from 'react';\r\nimport './tasks.css';\r\nimport Check from './check.png';\r\nimport Checkok from './check-ok.png';\r\nimport classNames from 'classnames';\r\nclass Task extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            tick: 1\r\n        }\r\n        this.tickf=this.tickf.bind(this);\r\n        this.tickfok=this.tickfok.bind(this);\r\n    }\r\n\r\n        tickfok(){\r\n           \r\n             this.setState({tick:1});\r\n        \r\n             \r\n\r\n        }\r\n        tickf(){\r\n             this.setState({tick:0});\r\n             \r\n        }\r\n    \r\n    render(){\r\n        return <div className=\"containerTask\">\r\n            <img alt=\"\" \r\n                onClick={this.tickf} \r\n                className={\r\n                    classNames('not',{\r\n                        check: this.state.tick === 1\r\n                    })} \r\n                src= {Check}\r\n                />\r\n            <img alt=\"\" \r\n                 onClick={this.tickfok} \r\n                 className={classNames('not' ,{\r\n                    checkok: this.state.tick === 0\r\n                     })} \r\n                 src= {Checkok}/>\r\n        <div className={classNames('text',{\r\n            textthought: this.state.tick === 0\r\n                    })}>\r\n                        {this.props.title}\r\n                        </div>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default Task;\r\n","import React,{Component} from 'react';\r\nimport './App.css';\r\nimport Task from './component/tasks.js';\r\nconst arr = [];\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      T: arr\r\n    }\r\n    this.rder=this.rder.bind(this)\r\n    \r\n  }\r\n\r\nrder(event){\r\n  const b =[<Task title={event.target.value}/>];\r\n  if(event.keyCode===13){\r\n  arr.push(b)\r\n  event.target.value='';\r\n  return(\r\n   this.setState({T: arr })\r\n  )\r\n}\r\n}\r\n\r\n  render(){\r\n    return <div className=\"container\">\r\n      <p className=\"appName\">Todos list</p>\r\n      <input onKeyUp={this.rder} className=\"input\"></input>\r\n      <div className=\"task\">{this.state.T}</div>\r\n    </div>\r\n  }\r\n}\r\n  \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}